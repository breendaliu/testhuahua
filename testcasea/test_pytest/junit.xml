<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="4" failures="5" hostname="DESKTOP-292JA13" name="pytest" skipped="0" tests="32" time="1166.162" timestamp="2023-12-28T15:02:38.301218"><testcase classname="test_home.TestHome" name="test_home" time="25.354" /><testcase classname="test_home.TestHome" name="test_store" time="24.366" /><testcase classname="test_home.TestHome" name="test_store_back" time="26.769" /><testcase classname="test_home.TestHome" name="test_store_keyword" time="25.608" /><testcase classname="test_idle.TestIdle" name="test_idle" time="22.779" /><testcase classname="test_mine.TestMine" name="test_qrcode" time="21.650" /><testcase classname="test_mine.TestMine" name="test_qrcode_bind_wx" time="74.275"><failure message="ValueError: 元素未找到，且不在黑名单中">args = (&lt;page.mine.Mine object at 0x000002B0BA214488&gt;, 'id', 'com.kejian.huahua:id/iv_qrcode'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.mine.Mine object at 0x000002B0BA214488&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...0y\x02\x07\x00\x00\x00\x90\'p\x00\x00\x00\x00y\x02\x07\x00\x00\x00\x907P:\x08\xf0r-\xe5R\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
&gt;           element = func(*args, **kwargs)

..\page\handle_black.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;page.mine.Mine object at 0x000002B0BA214488&gt;, by = 'id', locator = 'com.kejian.huahua:id/iv_qrcode'

    @handle_black
    def find(self, by, locator):
        logging.info("find")
        logging.info(locator)
        if locator is None:
            result = self._driver.find_element(*by)
        else:
&gt;           result = self._driver.find_element(by, locator)

..\page\base_page.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="f6f6dcab-e8b6-4a65-9bc2-686b23d8f764")&gt;, by = 'id', value = 'com.kejian.huahua:id/iv_qrcode'

    def find_element(self, by: str = AppiumBy.ID, value: Union[str, Dict, None] = None) -&gt; MobileWebElement:
        """
        Find an element given a AppiumBy strategy and locator
    
        Args:
            by: The strategy
            value: The locator
    
        Usage:
            driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='accessibility_id')
    
        Returns:
            `appium.webdriver.webelement.WebElement`: The found element
    
        """
        # We prefer to patch locators in the client code
        # Checking current context every time a locator is accessed could significantly slow down tests
        # Check https://github.com/appium/python-client/pull/724 before submitting any issue
        # if by == By.ID:
        #     by = By.CSS_SELECTOR
        #     value = '[id="%s"]' % value
        # elif by == By.TAG_NAME:
        #     by = By.CSS_SELECTOR
        # elif by == By.CLASS_NAME:
        #     by = By.CSS_SELECTOR
        #     value = ".%s" % value
        # elif by == By.NAME:
        #     by = By.CSS_SELECTOR
        #     value = '[name="%s"]' % value
    
&gt;       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']

..\venv\lib\site-packages\appium\webdriver\webdriver.py:383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="f6f6dcab-e8b6-4a65-9bc2-686b23d8f764")&gt;, driver_command = 'findElement', params = {'using': 'id', 'value': 'com.kejian.huahua:id/iv_qrcode'}

    def execute(self, driver_command: str, params: dict = None) -&gt; dict:
        """Sends a command to be executed by a command.CommandExecutor.
    
        :Args:
         - driver_command: The name of the command to execute as a string.
         - params: A dictionary of named parameters to send with the command.
    
        :Returns:
          The command's JSON response loaded into a dictionary object.
        """
        params = self._wrap_value(params)
    
        if self.session_id:
            if not params:
                params = {"sessionId": self.session_id}
            elif "sessionId" not in params:
                params["sessionId"] = self.session_id
    
        response = self.command_executor.execute(driver_command, params)
        if response:
&gt;           self.error_handler.check_response(response)

..\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:440: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA212D88&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
            super().check_response(response)
        except WebDriverException as wde:
            if wde.msg == 'No such context found.':
                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde
&gt;           raise wde

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA212D88&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
&gt;           super().check_response(response)

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA212D88&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.
E       Stacktrace:
E       NoSuchElementError: An element could not be located on the page using the given search parameters.
E           at AndroidUiautomator2Driver.helpers.findElOrEls (C:\Users\dd-33\AppData\Local\Programs\Appium\resources\app\node_modules\appium\node_modules\appium-android-driver\lib\commands\find.js:75:11)
E           at process._tickCallback (internal/process/next_tick.js:68:7)

..\venv\lib\site-packages\selenium\webdriver\remote\errorhandler.py:245: NoSuchElementException

During handling of the above exception, another exception occurred:

self = &lt;testcase.test_mine.TestMine object at 0x000002B0BA0AE308&gt;

    def test_qrcode_bind_wx(self):
&gt;       assert self.mine.qrcode_bind_wx() is None

test_mine.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\page\mine.py:16: in qrcode_bind_wx
    self.steps("../data/mine.yaml", "qrcode")
..\page\base_page.py:90: in steps
    self.find(step["by"], step["locator"]).click()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (&lt;page.mine.Mine object at 0x000002B0BA214488&gt;, 'id', 'com.kejian.huahua:id/iv_qrcode'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.mine.Mine object at 0x000002B0BA214488&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...0y\x02\x07\x00\x00\x00\x90\'p\x00\x00\x00\x00y\x02\x07\x00\x00\x00\x907P:\x08\xf0r-\xe5R\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
            element = func(*args, **kwargs)
            # 清空错误次数
            _error_num = 0
            instance.set_implicitly_wait(20)
            return element
        except Exception as e:
            instance.screenshot("tmp.png")
            with open("tmp.png", "rb") as f:
                content = f.read()
            #.attach(content, attachment_type=.attachment_type.PNG)
            logging.error("element not found, handle black list")
            instance.set_implicitly_wait(5)
            # 如果次数太多，就退出异常逻辑，直接报错
            if instance._error_num &gt; instance._max_err_num:
                instance._error_num = 0
                raise e
            # 记录一直异常的次数
            instance._error_num += 1
            # 对黑名单里的弹框进行处理
            for ele in instance._black_list:
                logging.info(ele)
                eles = instance.finds(ele)
                if len(eles) &gt; 0:
                    eles[0].click()
                    # 继续寻找原来的正常控件
                    return wrapper(*args, **kwargs)
            # 如果黑名单也没有，就报错
            logging.warning("black list no one foound")
&gt;           raise ValueError("元素未找到，且不在黑名单中")
E           ValueError: 元素未找到，且不在黑名单中

..\page\handle_black.py:59: ValueError</failure></testcase><testcase classname="test_mine.TestMine" name="test_qrcode_back" time="71.164"><failure message="ValueError: 元素未找到，且不在黑名单中">args = (&lt;page.mine.Mine object at 0x000002B0BA28BAC8&gt;, 'id', 'com.kejian.huahua:id/iv_qrcode'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.mine.Mine object at 0x000002B0BA28BAC8&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...x88\x88\x88\x88\x88h\xec1\xe0 """"""\xa2\xb1\xf7\xff\x03\xd1\xa4\xef\xbd\xc2\x1a\x96\xc3\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
&gt;           element = func(*args, **kwargs)

..\page\handle_black.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;page.mine.Mine object at 0x000002B0BA28BAC8&gt;, by = 'id', locator = 'com.kejian.huahua:id/iv_qrcode'

    @handle_black
    def find(self, by, locator):
        logging.info("find")
        logging.info(locator)
        if locator is None:
            result = self._driver.find_element(*by)
        else:
&gt;           result = self._driver.find_element(by, locator)

..\page\base_page.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="b87557bd-fba0-4f72-8dee-780bf5eb9491")&gt;, by = 'id', value = 'com.kejian.huahua:id/iv_qrcode'

    def find_element(self, by: str = AppiumBy.ID, value: Union[str, Dict, None] = None) -&gt; MobileWebElement:
        """
        Find an element given a AppiumBy strategy and locator
    
        Args:
            by: The strategy
            value: The locator
    
        Usage:
            driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='accessibility_id')
    
        Returns:
            `appium.webdriver.webelement.WebElement`: The found element
    
        """
        # We prefer to patch locators in the client code
        # Checking current context every time a locator is accessed could significantly slow down tests
        # Check https://github.com/appium/python-client/pull/724 before submitting any issue
        # if by == By.ID:
        #     by = By.CSS_SELECTOR
        #     value = '[id="%s"]' % value
        # elif by == By.TAG_NAME:
        #     by = By.CSS_SELECTOR
        # elif by == By.CLASS_NAME:
        #     by = By.CSS_SELECTOR
        #     value = ".%s" % value
        # elif by == By.NAME:
        #     by = By.CSS_SELECTOR
        #     value = '[name="%s"]' % value
    
&gt;       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']

..\venv\lib\site-packages\appium\webdriver\webdriver.py:383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="b87557bd-fba0-4f72-8dee-780bf5eb9491")&gt;, driver_command = 'findElement', params = {'using': 'id', 'value': 'com.kejian.huahua:id/iv_qrcode'}

    def execute(self, driver_command: str, params: dict = None) -&gt; dict:
        """Sends a command to be executed by a command.CommandExecutor.
    
        :Args:
         - driver_command: The name of the command to execute as a string.
         - params: A dictionary of named parameters to send with the command.
    
        :Returns:
          The command's JSON response loaded into a dictionary object.
        """
        params = self._wrap_value(params)
    
        if self.session_id:
            if not params:
                params = {"sessionId": self.session_id}
            elif "sessionId" not in params:
                params["sessionId"] = self.session_id
    
        response = self.command_executor.execute(driver_command, params)
        if response:
&gt;           self.error_handler.check_response(response)

..\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:440: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA550648&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
            super().check_response(response)
        except WebDriverException as wde:
            if wde.msg == 'No such context found.':
                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde
&gt;           raise wde

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA550648&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
&gt;           super().check_response(response)

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA550648&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.
E       Stacktrace:
E       NoSuchElementError: An element could not be located on the page using the given search parameters.
E           at AndroidUiautomator2Driver.helpers.findElOrEls (C:\Users\dd-33\AppData\Local\Programs\Appium\resources\app\node_modules\appium\node_modules\appium-android-driver\lib\commands\find.js:75:11)
E           at process._tickCallback (internal/process/next_tick.js:68:7)

..\venv\lib\site-packages\selenium\webdriver\remote\errorhandler.py:245: NoSuchElementException

During handling of the above exception, another exception occurred:

self = &lt;testcase.test_mine.TestMine object at 0x000002B0BA0A7FC8&gt;

    def test_qrcode_back(self):
&gt;       assert "主页" in self.mine.qrcode_back()

test_mine.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\page\mine.py:30: in qrcode_back
    self.steps("../data/mine.yaml", "qrcode")
..\page\base_page.py:90: in steps
    self.find(step["by"], step["locator"]).click()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (&lt;page.mine.Mine object at 0x000002B0BA28BAC8&gt;, 'id', 'com.kejian.huahua:id/iv_qrcode'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.mine.Mine object at 0x000002B0BA28BAC8&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...x88\x88\x88\x88\x88h\xec1\xe0 """"""\xa2\xb1\xf7\xff\x03\xd1\xa4\xef\xbd\xc2\x1a\x96\xc3\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
            element = func(*args, **kwargs)
            # 清空错误次数
            _error_num = 0
            instance.set_implicitly_wait(20)
            return element
        except Exception as e:
            instance.screenshot("tmp.png")
            with open("tmp.png", "rb") as f:
                content = f.read()
            #.attach(content, attachment_type=.attachment_type.PNG)
            logging.error("element not found, handle black list")
            instance.set_implicitly_wait(5)
            # 如果次数太多，就退出异常逻辑，直接报错
            if instance._error_num &gt; instance._max_err_num:
                instance._error_num = 0
                raise e
            # 记录一直异常的次数
            instance._error_num += 1
            # 对黑名单里的弹框进行处理
            for ele in instance._black_list:
                logging.info(ele)
                eles = instance.finds(ele)
                if len(eles) &gt; 0:
                    eles[0].click()
                    # 继续寻找原来的正常控件
                    return wrapper(*args, **kwargs)
            # 如果黑名单也没有，就报错
            logging.warning("black list no one foound")
&gt;           raise ValueError("元素未找到，且不在黑名单中")
E           ValueError: 元素未找到，且不在黑名单中

..\page\handle_black.py:59: ValueError</failure></testcase><testcase classname="test_mine.TestMine" name="test_set" time="21.477" /><testcase classname="test_mine.TestMine" name="test_set_back" time="22.716" /><testcase classname="test_mine.TestMine" name="test_goto_mian_user" time="22.689" /><testcase classname="test_mine.TestMine" name="test_mian_user_back" time="23.288" /><testcase classname="test_mine.TestMine" name="test_liked" time="20.991" /><testcase classname="test_mine.TestMine" name="test_liked_know" time="22.577" /><testcase classname="test_mine.TestMine" name="test_focus" time="73.528"><failure message="ValueError: 元素未找到，且不在黑名单中">args = (&lt;page.mine.Mine object at 0x000002B0BA270FC8&gt;, 'id', 'com.kejian.huahua:id/tv_focus'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.mine.Mine object at 0x000002B0BA270FC8&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...03\x0e"""""""\xea{\x0c8\x88\x88\x88\x88\x88\x88\x88\xa8\xef\xfd\x7f\\\xc1\x07"V\xeb\x18C\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
&gt;           element = func(*args, **kwargs)

..\page\handle_black.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;page.mine.Mine object at 0x000002B0BA270FC8&gt;, by = 'id', locator = 'com.kejian.huahua:id/tv_focus'

    @handle_black
    def find(self, by, locator):
        logging.info("find")
        logging.info(locator)
        if locator is None:
            result = self._driver.find_element(*by)
        else:
&gt;           result = self._driver.find_element(by, locator)

..\page\base_page.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="83e272bc-b39b-42c2-a2ae-f83d9583f3e1")&gt;, by = 'id', value = 'com.kejian.huahua:id/tv_focus'

    def find_element(self, by: str = AppiumBy.ID, value: Union[str, Dict, None] = None) -&gt; MobileWebElement:
        """
        Find an element given a AppiumBy strategy and locator
    
        Args:
            by: The strategy
            value: The locator
    
        Usage:
            driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='accessibility_id')
    
        Returns:
            `appium.webdriver.webelement.WebElement`: The found element
    
        """
        # We prefer to patch locators in the client code
        # Checking current context every time a locator is accessed could significantly slow down tests
        # Check https://github.com/appium/python-client/pull/724 before submitting any issue
        # if by == By.ID:
        #     by = By.CSS_SELECTOR
        #     value = '[id="%s"]' % value
        # elif by == By.TAG_NAME:
        #     by = By.CSS_SELECTOR
        # elif by == By.CLASS_NAME:
        #     by = By.CSS_SELECTOR
        #     value = ".%s" % value
        # elif by == By.NAME:
        #     by = By.CSS_SELECTOR
        #     value = '[name="%s"]' % value
    
&gt;       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']

..\venv\lib\site-packages\appium\webdriver\webdriver.py:383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="83e272bc-b39b-42c2-a2ae-f83d9583f3e1")&gt;, driver_command = 'findElement', params = {'using': 'id', 'value': 'com.kejian.huahua:id/tv_focus'}

    def execute(self, driver_command: str, params: dict = None) -&gt; dict:
        """Sends a command to be executed by a command.CommandExecutor.
    
        :Args:
         - driver_command: The name of the command to execute as a string.
         - params: A dictionary of named parameters to send with the command.
    
        :Returns:
          The command's JSON response loaded into a dictionary object.
        """
        params = self._wrap_value(params)
    
        if self.session_id:
            if not params:
                params = {"sessionId": self.session_id}
            elif "sessionId" not in params:
                params["sessionId"] = self.session_id
    
        response = self.command_executor.execute(driver_command, params)
        if response:
&gt;           self.error_handler.check_response(response)

..\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:440: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA4C7D88&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
            super().check_response(response)
        except WebDriverException as wde:
            if wde.msg == 'No such context found.':
                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde
&gt;           raise wde

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA4C7D88&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
&gt;           super().check_response(response)

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA4C7D88&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.
E       Stacktrace:
E       NoSuchElementError: An element could not be located on the page using the given search parameters.
E           at AndroidUiautomator2Driver.helpers.findElOrEls (C:\Users\dd-33\AppData\Local\Programs\Appium\resources\app\node_modules\appium\node_modules\appium-android-driver\lib\commands\find.js:75:11)
E           at process._tickCallback (internal/process/next_tick.js:68:7)

..\venv\lib\site-packages\selenium\webdriver\remote\errorhandler.py:245: NoSuchElementException

During handling of the above exception, another exception occurred:

self = &lt;testcase.test_mine.TestMine object at 0x000002B0BA0B27C8&gt;

    def test_focus(self):
&gt;       assert "我的关注" in self.mine.focus()

test_mine.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\page\mine.py:74: in focus
    self.steps("../data/mine.yaml", "focus")
..\page\base_page.py:90: in steps
    self.find(step["by"], step["locator"]).click()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (&lt;page.mine.Mine object at 0x000002B0BA270FC8&gt;, 'id', 'com.kejian.huahua:id/tv_focus'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.mine.Mine object at 0x000002B0BA270FC8&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...03\x0e"""""""\xea{\x0c8\x88\x88\x88\x88\x88\x88\x88\xa8\xef\xfd\x7f\\\xc1\x07"V\xeb\x18C\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
            element = func(*args, **kwargs)
            # 清空错误次数
            _error_num = 0
            instance.set_implicitly_wait(20)
            return element
        except Exception as e:
            instance.screenshot("tmp.png")
            with open("tmp.png", "rb") as f:
                content = f.read()
            #.attach(content, attachment_type=.attachment_type.PNG)
            logging.error("element not found, handle black list")
            instance.set_implicitly_wait(5)
            # 如果次数太多，就退出异常逻辑，直接报错
            if instance._error_num &gt; instance._max_err_num:
                instance._error_num = 0
                raise e
            # 记录一直异常的次数
            instance._error_num += 1
            # 对黑名单里的弹框进行处理
            for ele in instance._black_list:
                logging.info(ele)
                eles = instance.finds(ele)
                if len(eles) &gt; 0:
                    eles[0].click()
                    # 继续寻找原来的正常控件
                    return wrapper(*args, **kwargs)
            # 如果黑名单也没有，就报错
            logging.warning("black list no one foound")
&gt;           raise ValueError("元素未找到，且不在黑名单中")
E           ValueError: 元素未找到，且不在黑名单中

..\page\handle_black.py:59: ValueError</failure></testcase><testcase classname="test_mine.TestMine" name="test_friends_back" time="23.063" /><testcase classname="test_mine.TestMine" name="test_fans" time="20.995" /><testcase classname="test_mine.TestMine" name="test_wallet" time="20.123" /><testcase classname="test_mine.TestMine" name="test_wallet_back" time="22.900" /><testcase classname="test_mine.TestMine" name="test_welfare" time="23.065" /><testcase classname="test_mine.TestMine" name="test_welfare_back" time="74.156"><failure message="ValueError: 元素未找到，且不在黑名单中">args = (&lt;page.mine.Mine object at 0x000002B0BA2690C8&gt;, 'id', 'com.kejian.huahua:id/rl_welfare'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.mine.Mine object at 0x000002B0BA2690C8&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...\x1cDDDDDDD\xd4\xf7\x18p\x10\x11\x11\x11\x11\x11\x11Q\xdf\xfb\xff\x15&amp;[\xb6\x8e^\xab\xa0\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
&gt;           element = func(*args, **kwargs)

..\page\handle_black.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;page.mine.Mine object at 0x000002B0BA2690C8&gt;, by = 'id', locator = 'com.kejian.huahua:id/rl_welfare'

    @handle_black
    def find(self, by, locator):
        logging.info("find")
        logging.info(locator)
        if locator is None:
            result = self._driver.find_element(*by)
        else:
&gt;           result = self._driver.find_element(by, locator)

..\page\base_page.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="3de75db8-5fd9-4dca-915f-36a07c068b35")&gt;, by = 'id', value = 'com.kejian.huahua:id/rl_welfare'

    def find_element(self, by: str = AppiumBy.ID, value: Union[str, Dict, None] = None) -&gt; MobileWebElement:
        """
        Find an element given a AppiumBy strategy and locator
    
        Args:
            by: The strategy
            value: The locator
    
        Usage:
            driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='accessibility_id')
    
        Returns:
            `appium.webdriver.webelement.WebElement`: The found element
    
        """
        # We prefer to patch locators in the client code
        # Checking current context every time a locator is accessed could significantly slow down tests
        # Check https://github.com/appium/python-client/pull/724 before submitting any issue
        # if by == By.ID:
        #     by = By.CSS_SELECTOR
        #     value = '[id="%s"]' % value
        # elif by == By.TAG_NAME:
        #     by = By.CSS_SELECTOR
        # elif by == By.CLASS_NAME:
        #     by = By.CSS_SELECTOR
        #     value = ".%s" % value
        # elif by == By.NAME:
        #     by = By.CSS_SELECTOR
        #     value = '[name="%s"]' % value
    
&gt;       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']

..\venv\lib\site-packages\appium\webdriver\webdriver.py:383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="3de75db8-5fd9-4dca-915f-36a07c068b35")&gt;, driver_command = 'findElement', params = {'using': 'id', 'value': 'com.kejian.huahua:id/rl_welfare'}

    def execute(self, driver_command: str, params: dict = None) -&gt; dict:
        """Sends a command to be executed by a command.CommandExecutor.
    
        :Args:
         - driver_command: The name of the command to execute as a string.
         - params: A dictionary of named parameters to send with the command.
    
        :Returns:
          The command's JSON response loaded into a dictionary object.
        """
        params = self._wrap_value(params)
    
        if self.session_id:
            if not params:
                params = {"sessionId": self.session_id}
            elif "sessionId" not in params:
                params["sessionId"] = self.session_id
    
        response = self.command_executor.execute(driver_command, params)
        if response:
&gt;           self.error_handler.check_response(response)

..\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:440: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BB08B7C8&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
            super().check_response(response)
        except WebDriverException as wde:
            if wde.msg == 'No such context found.':
                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde
&gt;           raise wde

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BB08B7C8&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
&gt;           super().check_response(response)

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BB08B7C8&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.
E       Stacktrace:
E       NoSuchElementError: An element could not be located on the page using the given search parameters.
E           at AndroidUiautomator2Driver.helpers.findElOrEls (C:\Users\dd-33\AppData\Local\Programs\Appium\resources\app\node_modules\appium\node_modules\appium-android-driver\lib\commands\find.js:75:11)
E           at process._tickCallback (internal/process/next_tick.js:68:7)

..\venv\lib\site-packages\selenium\webdriver\remote\errorhandler.py:245: NoSuchElementException

During handling of the above exception, another exception occurred:

self = &lt;testcase.test_mine.TestMine object at 0x000002B0BA0BBB88&gt;

    def test_welfare_back(self):
&gt;       assert "主页" in self.mine.welfare_back()

test_mine.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\page\mine.py:112: in welfare_back
    self.steps("../data/mine.yaml", "welfare")
..\page\base_page.py:90: in steps
    self.find(step["by"], step["locator"]).click()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (&lt;page.mine.Mine object at 0x000002B0BA2690C8&gt;, 'id', 'com.kejian.huahua:id/rl_welfare'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.mine.Mine object at 0x000002B0BA2690C8&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...\x1cDDDDDDD\xd4\xf7\x18p\x10\x11\x11\x11\x11\x11\x11Q\xdf\xfb\xff\x15&amp;[\xb6\x8e^\xab\xa0\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
            element = func(*args, **kwargs)
            # 清空错误次数
            _error_num = 0
            instance.set_implicitly_wait(20)
            return element
        except Exception as e:
            instance.screenshot("tmp.png")
            with open("tmp.png", "rb") as f:
                content = f.read()
            #.attach(content, attachment_type=.attachment_type.PNG)
            logging.error("element not found, handle black list")
            instance.set_implicitly_wait(5)
            # 如果次数太多，就退出异常逻辑，直接报错
            if instance._error_num &gt; instance._max_err_num:
                instance._error_num = 0
                raise e
            # 记录一直异常的次数
            instance._error_num += 1
            # 对黑名单里的弹框进行处理
            for ele in instance._black_list:
                logging.info(ele)
                eles = instance.finds(ele)
                if len(eles) &gt; 0:
                    eles[0].click()
                    # 继续寻找原来的正常控件
                    return wrapper(*args, **kwargs)
            # 如果黑名单也没有，就报错
            logging.warning("black list no one foound")
&gt;           raise ValueError("元素未找到，且不在黑名单中")
E           ValueError: 元素未找到，且不在黑名单中

..\page\handle_black.py:59: ValueError</failure></testcase><testcase classname="test_pswd.TestPwsd" name="test_login_password" time="70.769"><error message="failed on setup with &quot;ValueError: 元素未找到，且不在黑名单中&quot;">args = (&lt;page.main.Main object at 0x000002B0BB01EE08&gt;, 'id', 'com.kejian.huahua:id/rl_phone_login'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.main.Main object at 0x000002B0BB01EE08&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...x1cDDDDDDD4\xf4\x18p\x10\x11\x11\x11\x11\x11\x11\xd1\xd0\xfb\xff\x01\x88T]\x85PP\xcb\xde\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
&gt;           element = func(*args, **kwargs)

..\page\handle_black.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;page.main.Main object at 0x000002B0BB01EE08&gt;, by = 'id', locator = 'com.kejian.huahua:id/rl_phone_login'

    @handle_black
    def find(self, by, locator):
        logging.info("find")
        logging.info(locator)
        if locator is None:
            result = self._driver.find_element(*by)
        else:
&gt;           result = self._driver.find_element(by, locator)

..\page\base_page.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="ebdf89c0-a63d-4924-9fc2-1109824d6c61")&gt;, by = 'id', value = 'com.kejian.huahua:id/rl_phone_login'

    def find_element(self, by: str = AppiumBy.ID, value: Union[str, Dict, None] = None) -&gt; MobileWebElement:
        """
        Find an element given a AppiumBy strategy and locator
    
        Args:
            by: The strategy
            value: The locator
    
        Usage:
            driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='accessibility_id')
    
        Returns:
            `appium.webdriver.webelement.WebElement`: The found element
    
        """
        # We prefer to patch locators in the client code
        # Checking current context every time a locator is accessed could significantly slow down tests
        # Check https://github.com/appium/python-client/pull/724 before submitting any issue
        # if by == By.ID:
        #     by = By.CSS_SELECTOR
        #     value = '[id="%s"]' % value
        # elif by == By.TAG_NAME:
        #     by = By.CSS_SELECTOR
        # elif by == By.CLASS_NAME:
        #     by = By.CSS_SELECTOR
        #     value = ".%s" % value
        # elif by == By.NAME:
        #     by = By.CSS_SELECTOR
        #     value = '[name="%s"]' % value
    
&gt;       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']

..\venv\lib\site-packages\appium\webdriver\webdriver.py:383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="ebdf89c0-a63d-4924-9fc2-1109824d6c61")&gt;, driver_command = 'findElement', params = {'using': 'id', 'value': 'com.kejian.huahua:id/rl_phone_login'}

    def execute(self, driver_command: str, params: dict = None) -&gt; dict:
        """Sends a command to be executed by a command.CommandExecutor.
    
        :Args:
         - driver_command: The name of the command to execute as a string.
         - params: A dictionary of named parameters to send with the command.
    
        :Returns:
          The command's JSON response loaded into a dictionary object.
        """
        params = self._wrap_value(params)
    
        if self.session_id:
            if not params:
                params = {"sessionId": self.session_id}
            elif "sessionId" not in params:
                params["sessionId"] = self.session_id
    
        response = self.command_executor.execute(driver_command, params)
        if response:
&gt;           self.error_handler.check_response(response)

..\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:440: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BB0062C8&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
            super().check_response(response)
        except WebDriverException as wde:
            if wde.msg == 'No such context found.':
                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde
&gt;           raise wde

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BB0062C8&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
&gt;           super().check_response(response)

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BB0062C8&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.
E       Stacktrace:
E       NoSuchElementError: An element could not be located on the page using the given search parameters.
E           at AndroidUiautomator2Driver.helpers.findElOrEls (C:\Users\dd-33\AppData\Local\Programs\Appium\resources\app\node_modules\appium\node_modules\appium-android-driver\lib\commands\find.js:75:11)
E           at process._tickCallback (internal/process/next_tick.js:68:7)

..\venv\lib\site-packages\selenium\webdriver\remote\errorhandler.py:245: NoSuchElementException

During handling of the above exception, another exception occurred:

self = &lt;testcase.test_pswd.TestPwsd object at 0x000002B0BA0C2488&gt;

    def setup(self):
&gt;       self.login = App().start().main().goto_test_login_password()

test_pswd.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\page\main.py:15: in goto_test_login_password
    self.steps("../data/login_pswd.yaml", "login_pswd")
..\page\base_page.py:90: in steps
    self.find(step["by"], step["locator"]).click()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (&lt;page.main.Main object at 0x000002B0BB01EE08&gt;, 'id', 'com.kejian.huahua:id/rl_phone_login'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.main.Main object at 0x000002B0BB01EE08&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...x1cDDDDDDD4\xf4\x18p\x10\x11\x11\x11\x11\x11\x11\xd1\xd0\xfb\xff\x01\x88T]\x85PP\xcb\xde\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
            element = func(*args, **kwargs)
            # 清空错误次数
            _error_num = 0
            instance.set_implicitly_wait(20)
            return element
        except Exception as e:
            instance.screenshot("tmp.png")
            with open("tmp.png", "rb") as f:
                content = f.read()
            #.attach(content, attachment_type=.attachment_type.PNG)
            logging.error("element not found, handle black list")
            instance.set_implicitly_wait(5)
            # 如果次数太多，就退出异常逻辑，直接报错
            if instance._error_num &gt; instance._max_err_num:
                instance._error_num = 0
                raise e
            # 记录一直异常的次数
            instance._error_num += 1
            # 对黑名单里的弹框进行处理
            for ele in instance._black_list:
                logging.info(ele)
                eles = instance.finds(ele)
                if len(eles) &gt; 0:
                    eles[0].click()
                    # 继续寻找原来的正常控件
                    return wrapper(*args, **kwargs)
            # 如果黑名单也没有，就报错
            logging.warning("black list no one foound")
&gt;           raise ValueError("元素未找到，且不在黑名单中")
E           ValueError: 元素未找到，且不在黑名单中

..\page\handle_black.py:59: ValueError</error></testcase><testcase classname="test_recycle.TestRecycle" name="test_recycle" time="19.580" /><testcase classname="test_set.TestSet" name="test_set_profil" time="22.286" /><testcase classname="test_set.TestSet" name="test_set_accout_safe" time="21.355" /><testcase classname="test_set.TestSet" name="test_set_privacy" time="71.417"><error message="failed on setup with &quot;ValueError: 元素未找到，且不在黑名单中&quot;">args = (&lt;page.main.Main object at 0x000002B0BA0FEE08&gt;, 'id', 'com.kejian.huahua:id/iv_settings'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.main.Main object at 0x000002B0BA0FEE08&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...0\x00\x00\x00\xe0y\x04\x1c\x00\x00\x00\x00\x00\xc0\xf3\xfe\x0f\x1fS\xf7\xccR\xd8\xa7\x80\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
&gt;           element = func(*args, **kwargs)

..\page\handle_black.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;page.main.Main object at 0x000002B0BA0FEE08&gt;, by = 'id', locator = 'com.kejian.huahua:id/iv_settings'

    @handle_black
    def find(self, by, locator):
        logging.info("find")
        logging.info(locator)
        if locator is None:
            result = self._driver.find_element(*by)
        else:
&gt;           result = self._driver.find_element(by, locator)

..\page\base_page.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="83fc5026-9e8a-49c2-95f3-37d74fa4152d")&gt;, by = 'id', value = 'com.kejian.huahua:id/iv_settings'

    def find_element(self, by: str = AppiumBy.ID, value: Union[str, Dict, None] = None) -&gt; MobileWebElement:
        """
        Find an element given a AppiumBy strategy and locator
    
        Args:
            by: The strategy
            value: The locator
    
        Usage:
            driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='accessibility_id')
    
        Returns:
            `appium.webdriver.webelement.WebElement`: The found element
    
        """
        # We prefer to patch locators in the client code
        # Checking current context every time a locator is accessed could significantly slow down tests
        # Check https://github.com/appium/python-client/pull/724 before submitting any issue
        # if by == By.ID:
        #     by = By.CSS_SELECTOR
        #     value = '[id="%s"]' % value
        # elif by == By.TAG_NAME:
        #     by = By.CSS_SELECTOR
        # elif by == By.CLASS_NAME:
        #     by = By.CSS_SELECTOR
        #     value = ".%s" % value
        # elif by == By.NAME:
        #     by = By.CSS_SELECTOR
        #     value = '[name="%s"]' % value
    
&gt;       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']

..\venv\lib\site-packages\appium\webdriver\webdriver.py:383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="83fc5026-9e8a-49c2-95f3-37d74fa4152d")&gt;, driver_command = 'findElement', params = {'using': 'id', 'value': 'com.kejian.huahua:id/iv_settings'}

    def execute(self, driver_command: str, params: dict = None) -&gt; dict:
        """Sends a command to be executed by a command.CommandExecutor.
    
        :Args:
         - driver_command: The name of the command to execute as a string.
         - params: A dictionary of named parameters to send with the command.
    
        :Returns:
          The command's JSON response loaded into a dictionary object.
        """
        params = self._wrap_value(params)
    
        if self.session_id:
            if not params:
                params = {"sessionId": self.session_id}
            elif "sessionId" not in params:
                params["sessionId"] = self.session_id
    
        response = self.command_executor.execute(driver_command, params)
        if response:
&gt;           self.error_handler.check_response(response)

..\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:440: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA275A48&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
            super().check_response(response)
        except WebDriverException as wde:
            if wde.msg == 'No such context found.':
                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde
&gt;           raise wde

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA275A48&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
&gt;           super().check_response(response)

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA275A48&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.
E       Stacktrace:
E       NoSuchElementError: An element could not be located on the page using the given search parameters.
E           at AndroidUiautomator2Driver.helpers.findElOrEls (C:\Users\dd-33\AppData\Local\Programs\Appium\resources\app\node_modules\appium\node_modules\appium-android-driver\lib\commands\find.js:75:11)
E           at process._tickCallback (internal/process/next_tick.js:68:7)

..\venv\lib\site-packages\selenium\webdriver\remote\errorhandler.py:245: NoSuchElementException

During handling of the above exception, another exception occurred:

self = &lt;testcase.test_set.TestSet object at 0x000002B0BA0AE0C8&gt;

    def setup(self):
&gt;       self.set = App().start().main().goto_set()

test_set.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\page\main.py:41: in goto_set
    self.steps("../data/mine.yaml", "goto_set")
..\page\base_page.py:90: in steps
    self.find(step["by"], step["locator"]).click()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (&lt;page.main.Main object at 0x000002B0BA0FEE08&gt;, 'id', 'com.kejian.huahua:id/iv_settings'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.main.Main object at 0x000002B0BA0FEE08&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...0\x00\x00\x00\xe0y\x04\x1c\x00\x00\x00\x00\x00\xc0\xf3\xfe\x0f\x1fS\xf7\xccR\xd8\xa7\x80\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
            element = func(*args, **kwargs)
            # 清空错误次数
            _error_num = 0
            instance.set_implicitly_wait(20)
            return element
        except Exception as e:
            instance.screenshot("tmp.png")
            with open("tmp.png", "rb") as f:
                content = f.read()
            #.attach(content, attachment_type=.attachment_type.PNG)
            logging.error("element not found, handle black list")
            instance.set_implicitly_wait(5)
            # 如果次数太多，就退出异常逻辑，直接报错
            if instance._error_num &gt; instance._max_err_num:
                instance._error_num = 0
                raise e
            # 记录一直异常的次数
            instance._error_num += 1
            # 对黑名单里的弹框进行处理
            for ele in instance._black_list:
                logging.info(ele)
                eles = instance.finds(ele)
                if len(eles) &gt; 0:
                    eles[0].click()
                    # 继续寻找原来的正常控件
                    return wrapper(*args, **kwargs)
            # 如果黑名单也没有，就报错
            logging.warning("black list no one foound")
&gt;           raise ValueError("元素未找到，且不在黑名单中")
E           ValueError: 元素未找到，且不在黑名单中

..\page\handle_black.py:59: ValueError</error></testcase><testcase classname="test_set.TestSet" name="test_set_messgae" time="66.744"><failure message="ValueError: 元素未找到，且不在黑名单中">args = (&lt;page.set.Set object at 0x000002B0BA217A08&gt;, 'id', 'miui:id/action_bar_title'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.set.Set object at 0x000002B0BA217A08&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...0\x00\x00\x00\xb6G\xc0\x01\x00\x00\x00\x00\x00l\xef\x7f\x01\x18-\xcb\xd6\x9a\xc5\xa2\xab\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
&gt;           element = func(*args, **kwargs)

..\page\handle_black.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;page.set.Set object at 0x000002B0BA217A08&gt;, by = 'id', locator = 'miui:id/action_bar_title'

    @handle_black
    def find(self, by, locator):
        logging.info("find")
        logging.info(locator)
        if locator is None:
            result = self._driver.find_element(*by)
        else:
&gt;           result = self._driver.find_element(by, locator)

..\page\base_page.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="fffe8907-5da7-45bf-af3c-0f5eac9b91a7")&gt;, by = 'id', value = 'miui:id/action_bar_title'

    def find_element(self, by: str = AppiumBy.ID, value: Union[str, Dict, None] = None) -&gt; MobileWebElement:
        """
        Find an element given a AppiumBy strategy and locator
    
        Args:
            by: The strategy
            value: The locator
    
        Usage:
            driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='accessibility_id')
    
        Returns:
            `appium.webdriver.webelement.WebElement`: The found element
    
        """
        # We prefer to patch locators in the client code
        # Checking current context every time a locator is accessed could significantly slow down tests
        # Check https://github.com/appium/python-client/pull/724 before submitting any issue
        # if by == By.ID:
        #     by = By.CSS_SELECTOR
        #     value = '[id="%s"]' % value
        # elif by == By.TAG_NAME:
        #     by = By.CSS_SELECTOR
        # elif by == By.CLASS_NAME:
        #     by = By.CSS_SELECTOR
        #     value = ".%s" % value
        # elif by == By.NAME:
        #     by = By.CSS_SELECTOR
        #     value = '[name="%s"]' % value
    
&gt;       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']

..\venv\lib\site-packages\appium\webdriver\webdriver.py:383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="fffe8907-5da7-45bf-af3c-0f5eac9b91a7")&gt;, driver_command = 'findElement', params = {'using': 'id', 'value': 'miui:id/action_bar_title'}

    def execute(self, driver_command: str, params: dict = None) -&gt; dict:
        """Sends a command to be executed by a command.CommandExecutor.
    
        :Args:
         - driver_command: The name of the command to execute as a string.
         - params: A dictionary of named parameters to send with the command.
    
        :Returns:
          The command's JSON response loaded into a dictionary object.
        """
        params = self._wrap_value(params)
    
        if self.session_id:
            if not params:
                params = {"sessionId": self.session_id}
            elif "sessionId" not in params:
                params["sessionId"] = self.session_id
    
        response = self.command_executor.execute(driver_command, params)
        if response:
&gt;           self.error_handler.check_response(response)

..\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:440: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA257248&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
            super().check_response(response)
        except WebDriverException as wde:
            if wde.msg == 'No such context found.':
                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde
&gt;           raise wde

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA257248&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
&gt;           super().check_response(response)

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA257248&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.
E       Stacktrace:
E       NoSuchElementError: An element could not be located on the page using the given search parameters.
E           at AndroidUiautomator2Driver.helpers.findElOrEls (C:\Users\dd-33\AppData\Local\Programs\Appium\resources\app\node_modules\appium\node_modules\appium-android-driver\lib\commands\find.js:75:11)
E           at process._tickCallback (internal/process/next_tick.js:68:7)

..\venv\lib\site-packages\selenium\webdriver\remote\errorhandler.py:245: NoSuchElementException

During handling of the above exception, another exception occurred:

self = &lt;testcase.test_set.TestSet object at 0x000002B0BA0A7A08&gt;

    def test_set_messgae(self):
&gt;       assert "哗哗" in self.set.set_message()

test_set.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\page\set.py:28: in set_message
    element = self.find(By.ID, "miui:id/action_bar_title")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (&lt;page.set.Set object at 0x000002B0BA217A08&gt;, 'id', 'miui:id/action_bar_title'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.set.Set object at 0x000002B0BA217A08&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...0\x00\x00\x00\xb6G\xc0\x01\x00\x00\x00\x00\x00l\xef\x7f\x01\x18-\xcb\xd6\x9a\xc5\xa2\xab\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
            element = func(*args, **kwargs)
            # 清空错误次数
            _error_num = 0
            instance.set_implicitly_wait(20)
            return element
        except Exception as e:
            instance.screenshot("tmp.png")
            with open("tmp.png", "rb") as f:
                content = f.read()
            #.attach(content, attachment_type=.attachment_type.PNG)
            logging.error("element not found, handle black list")
            instance.set_implicitly_wait(5)
            # 如果次数太多，就退出异常逻辑，直接报错
            if instance._error_num &gt; instance._max_err_num:
                instance._error_num = 0
                raise e
            # 记录一直异常的次数
            instance._error_num += 1
            # 对黑名单里的弹框进行处理
            for ele in instance._black_list:
                logging.info(ele)
                eles = instance.finds(ele)
                if len(eles) &gt; 0:
                    eles[0].click()
                    # 继续寻找原来的正常控件
                    return wrapper(*args, **kwargs)
            # 如果黑名单也没有，就报错
            logging.warning("black list no one foound")
&gt;           raise ValueError("元素未找到，且不在黑名单中")
E           ValueError: 元素未找到，且不在黑名单中

..\page\handle_black.py:59: ValueError</failure></testcase><testcase classname="test_set.TestSet" name="test_set_address" time="22.344" /><testcase classname="test_set.TestSet" name="test_set_switch_account" time="21.892" /><testcase classname="test_set.TestSet" name="test_set_Clean" time="72.105"><error message="failed on setup with &quot;ValueError: 元素未找到，且不在黑名单中&quot;">args = (&lt;page.main.Main object at 0x000002B0BA26AA08&gt;, 'id', 'com.kejian.huahua:id/iv_settings'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.main.Main object at 0x000002B0BA26AA08&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...00 y\x02\x07\x00\x00\x00\x90&lt;\x81\x03\x00\x00\x00H\xde\xff\x00\x81\xc1P\xe0}\x01\x16\x88\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
&gt;           element = func(*args, **kwargs)

..\page\handle_black.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;page.main.Main object at 0x000002B0BA26AA08&gt;, by = 'id', locator = 'com.kejian.huahua:id/iv_settings'

    @handle_black
    def find(self, by, locator):
        logging.info("find")
        logging.info(locator)
        if locator is None:
            result = self._driver.find_element(*by)
        else:
&gt;           result = self._driver.find_element(by, locator)

..\page\base_page.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="d5540692-b9c5-4532-bc1d-11b1f7226160")&gt;, by = 'id', value = 'com.kejian.huahua:id/iv_settings'

    def find_element(self, by: str = AppiumBy.ID, value: Union[str, Dict, None] = None) -&gt; MobileWebElement:
        """
        Find an element given a AppiumBy strategy and locator
    
        Args:
            by: The strategy
            value: The locator
    
        Usage:
            driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='accessibility_id')
    
        Returns:
            `appium.webdriver.webelement.WebElement`: The found element
    
        """
        # We prefer to patch locators in the client code
        # Checking current context every time a locator is accessed could significantly slow down tests
        # Check https://github.com/appium/python-client/pull/724 before submitting any issue
        # if by == By.ID:
        #     by = By.CSS_SELECTOR
        #     value = '[id="%s"]' % value
        # elif by == By.TAG_NAME:
        #     by = By.CSS_SELECTOR
        # elif by == By.CLASS_NAME:
        #     by = By.CSS_SELECTOR
        #     value = ".%s" % value
        # elif by == By.NAME:
        #     by = By.CSS_SELECTOR
        #     value = '[name="%s"]' % value
    
&gt;       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']

..\venv\lib\site-packages\appium\webdriver\webdriver.py:383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="d5540692-b9c5-4532-bc1d-11b1f7226160")&gt;, driver_command = 'findElement', params = {'using': 'id', 'value': 'com.kejian.huahua:id/iv_settings'}

    def execute(self, driver_command: str, params: dict = None) -&gt; dict:
        """Sends a command to be executed by a command.CommandExecutor.
    
        :Args:
         - driver_command: The name of the command to execute as a string.
         - params: A dictionary of named parameters to send with the command.
    
        :Returns:
          The command's JSON response loaded into a dictionary object.
        """
        params = self._wrap_value(params)
    
        if self.session_id:
            if not params:
                params = {"sessionId": self.session_id}
            elif "sessionId" not in params:
                params["sessionId"] = self.session_id
    
        response = self.command_executor.execute(driver_command, params)
        if response:
&gt;           self.error_handler.check_response(response)

..\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:440: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA5FA188&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
            super().check_response(response)
        except WebDriverException as wde:
            if wde.msg == 'No such context found.':
                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde
&gt;           raise wde

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA5FA188&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
&gt;           super().check_response(response)

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA5FA188&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.
E       Stacktrace:
E       NoSuchElementError: An element could not be located on the page using the given search parameters.
E           at AndroidUiautomator2Driver.helpers.findElOrEls (C:\Users\dd-33\AppData\Local\Programs\Appium\resources\app\node_modules\appium\node_modules\appium-android-driver\lib\commands\find.js:75:11)
E           at process._tickCallback (internal/process/next_tick.js:68:7)

..\venv\lib\site-packages\selenium\webdriver\remote\errorhandler.py:245: NoSuchElementException

During handling of the above exception, another exception occurred:

self = &lt;testcase.test_set.TestSet object at 0x000002B0BA0CAC48&gt;

    def setup(self):
&gt;       self.set = App().start().main().goto_set()

test_set.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\page\main.py:41: in goto_set
    self.steps("../data/mine.yaml", "goto_set")
..\page\base_page.py:90: in steps
    self.find(step["by"], step["locator"]).click()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (&lt;page.main.Main object at 0x000002B0BA26AA08&gt;, 'id', 'com.kejian.huahua:id/iv_settings'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.main.Main object at 0x000002B0BA26AA08&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...00 y\x02\x07\x00\x00\x00\x90&lt;\x81\x03\x00\x00\x00H\xde\xff\x00\x81\xc1P\xe0}\x01\x16\x88\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
            element = func(*args, **kwargs)
            # 清空错误次数
            _error_num = 0
            instance.set_implicitly_wait(20)
            return element
        except Exception as e:
            instance.screenshot("tmp.png")
            with open("tmp.png", "rb") as f:
                content = f.read()
            #.attach(content, attachment_type=.attachment_type.PNG)
            logging.error("element not found, handle black list")
            instance.set_implicitly_wait(5)
            # 如果次数太多，就退出异常逻辑，直接报错
            if instance._error_num &gt; instance._max_err_num:
                instance._error_num = 0
                raise e
            # 记录一直异常的次数
            instance._error_num += 1
            # 对黑名单里的弹框进行处理
            for ele in instance._black_list:
                logging.info(ele)
                eles = instance.finds(ele)
                if len(eles) &gt; 0:
                    eles[0].click()
                    # 继续寻找原来的正常控件
                    return wrapper(*args, **kwargs)
            # 如果黑名单也没有，就报错
            logging.warning("black list no one foound")
&gt;           raise ValueError("元素未找到，且不在黑名单中")
E           ValueError: 元素未找到，且不在黑名单中

..\page\handle_black.py:59: ValueError</error></testcase><testcase classname="test_set.TestSet" name="test_set_clean_cancel" time="21.815" /><testcase classname="test_set.TestSet" name="test_set_clean_confirm" time="71.289"><error message="failed on setup with &quot;ValueError: 元素未找到，且不在黑名单中&quot;">args = (&lt;page.main.Main object at 0x000002B0BA20BE48&gt;, 'id', 'com.kejian.huahua:id/iv_settings'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.main.Main object at 0x000002B0BA20BE48&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...8c\xc0ADDDDDDDc\x8f\x01\x07\x11\x11\x11\x11\x11\x11\x11\x8d\xbd\xff\x1f\x08M\x8f-p\x958-\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
&gt;           element = func(*args, **kwargs)

..\page\handle_black.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;page.main.Main object at 0x000002B0BA20BE48&gt;, by = 'id', locator = 'com.kejian.huahua:id/iv_settings'

    @handle_black
    def find(self, by, locator):
        logging.info("find")
        logging.info(locator)
        if locator is None:
            result = self._driver.find_element(*by)
        else:
&gt;           result = self._driver.find_element(by, locator)

..\page\base_page.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="33bfafed-8346-4879-b02b-fe0499bdd8eb")&gt;, by = 'id', value = 'com.kejian.huahua:id/iv_settings'

    def find_element(self, by: str = AppiumBy.ID, value: Union[str, Dict, None] = None) -&gt; MobileWebElement:
        """
        Find an element given a AppiumBy strategy and locator
    
        Args:
            by: The strategy
            value: The locator
    
        Usage:
            driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='accessibility_id')
    
        Returns:
            `appium.webdriver.webelement.WebElement`: The found element
    
        """
        # We prefer to patch locators in the client code
        # Checking current context every time a locator is accessed could significantly slow down tests
        # Check https://github.com/appium/python-client/pull/724 before submitting any issue
        # if by == By.ID:
        #     by = By.CSS_SELECTOR
        #     value = '[id="%s"]' % value
        # elif by == By.TAG_NAME:
        #     by = By.CSS_SELECTOR
        # elif by == By.CLASS_NAME:
        #     by = By.CSS_SELECTOR
        #     value = ".%s" % value
        # elif by == By.NAME:
        #     by = By.CSS_SELECTOR
        #     value = '[name="%s"]' % value
    
&gt;       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']

..\venv\lib\site-packages\appium\webdriver\webdriver.py:383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.webdriver.WebDriver (session="33bfafed-8346-4879-b02b-fe0499bdd8eb")&gt;, driver_command = 'findElement', params = {'using': 'id', 'value': 'com.kejian.huahua:id/iv_settings'}

    def execute(self, driver_command: str, params: dict = None) -&gt; dict:
        """Sends a command to be executed by a command.CommandExecutor.
    
        :Args:
         - driver_command: The name of the command to execute as a string.
         - params: A dictionary of named parameters to send with the command.
    
        :Returns:
          The command's JSON response loaded into a dictionary object.
        """
        params = self._wrap_value(params)
    
        if self.session_id:
            if not params:
                params = {"sessionId": self.session_id}
            elif "sessionId" not in params:
                params["sessionId"] = self.session_id
    
        response = self.command_executor.execute(driver_command, params)
        if response:
&gt;           self.error_handler.check_response(response)

..\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:440: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA5FE208&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
            super().check_response(response)
        except WebDriverException as wde:
            if wde.msg == 'No such context found.':
                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde
&gt;           raise wde

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA5FE208&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict) -&gt; None:
        try:
&gt;           super().check_response(response)

..\venv\lib\site-packages\appium\webdriver\errorhandler.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA5FE208&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"An element could not be located on the page u...id-driver\\\\lib\\\\commands\\\\find.js:75:11)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.
E       Stacktrace:
E       NoSuchElementError: An element could not be located on the page using the given search parameters.
E           at AndroidUiautomator2Driver.helpers.findElOrEls (C:\Users\dd-33\AppData\Local\Programs\Appium\resources\app\node_modules\appium\node_modules\appium-android-driver\lib\commands\find.js:75:11)
E           at process._tickCallback (internal/process/next_tick.js:68:7)

..\venv\lib\site-packages\selenium\webdriver\remote\errorhandler.py:245: NoSuchElementException

During handling of the above exception, another exception occurred:

self = &lt;testcase.test_set.TestSet object at 0x000002B0BA0CD308&gt;

    def setup(self):
&gt;       self.set = App().start().main().goto_set()

test_set.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\page\main.py:41: in goto_set
    self.steps("../data/mine.yaml", "goto_set")
..\page\base_page.py:90: in steps
    self.find(step["by"], step["locator"]).click()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (&lt;page.main.Main object at 0x000002B0BA20BE48&gt;, 'id', 'com.kejian.huahua:id/iv_settings'), kwargs = {}
_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]
BasePage = &lt;class 'page.base_page.BasePage'&gt;, instance = &lt;page.main.Main object at 0x000002B0BA20BE48&gt;, f = &lt;_io.BufferedReader name='tmp.png'&gt;
content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x048\x00\x00\t$\x08\x06\x00\x00\x00\xf9\xd3\xcf\xaf\x00\x00\x00\x01sRGB\...8c\xc0ADDDDDDDc\x8f\x01\x07\x11\x11\x11\x11\x11\x11\x11\x8d\xbd\xff\x1f\x08M\x8f-p\x958-\x00\x00\x00\x00IEND\xaeB`\x82'
ele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []

    def wrapper(*args, **kwargs):
        # todo “以后再说”报错，当前提示无法弹出，待再次验证
        _black_list = [
            # 同意用户协议
            (By.ID, "com.kejian.huahua:id/tv_positive"),
            # 跳过启动页
            (By.ID, "com.kejian.huahua:id/iv_into"),
            # 同意隐私协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 选择登录方式页面，同意用户协议
            (By.ID, "com.kejian.huahua:id/iv_chose_state"),
            # 获取位置权限
           # (By.ID, "com.android.permissioncontroller:id/permission_allow_always_button"),
            #(By.ID, "com.lbe.security.miui:id/permission_allow_foreground_only_button"),
            # 关闭首页弹窗
           (By.ID, "com.kejian.huahua:id/iv_del_img")
    
        ]
        from page.base_page import BasePage
        instance: BasePage = args[0]  # 接入self
        try:
            logging.info("run " + func.__name__ + "\n args: \n" + repr(args[1:]) + "\n" + repr(kwargs))
            element = func(*args, **kwargs)
            # 清空错误次数
            _error_num = 0
            instance.set_implicitly_wait(20)
            return element
        except Exception as e:
            instance.screenshot("tmp.png")
            with open("tmp.png", "rb") as f:
                content = f.read()
            #.attach(content, attachment_type=.attachment_type.PNG)
            logging.error("element not found, handle black list")
            instance.set_implicitly_wait(5)
            # 如果次数太多，就退出异常逻辑，直接报错
            if instance._error_num &gt; instance._max_err_num:
                instance._error_num = 0
                raise e
            # 记录一直异常的次数
            instance._error_num += 1
            # 对黑名单里的弹框进行处理
            for ele in instance._black_list:
                logging.info(ele)
                eles = instance.finds(ele)
                if len(eles) &gt; 0:
                    eles[0].click()
                    # 继续寻找原来的正常控件
                    return wrapper(*args, **kwargs)
            # 如果黑名单也没有，就报错
            logging.warning("black list no one foound")
&gt;           raise ValueError("元素未找到，且不在黑名单中")
E           ValueError: 元素未找到，且不在黑名单中

..\page\handle_black.py:59: ValueError</error></testcase></testsuite></testsuites>