{"name": "test_qrcode_bind_wx", "status": "broken", "statusDetails": {"message": "ValueError: 元素未找到，且不在黑名单中", "trace": "args = (<page.mine.Mine object at 0x000002B0BA214488>, 'id', 'com.kejian.huahua:id/iv_qrcode'), kwargs = {}\n_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]\nBasePage = <class 'page.base_page.BasePage'>, instance = <page.mine.Mine object at 0x000002B0BA214488>, f = <_io.BufferedReader name='tmp.png'>\ncontent = b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x048\\x00\\x00\\t$\\x08\\x06\\x00\\x00\\x00\\xf9\\xd3\\xcf\\xaf\\x00\\x00\\x00\\x01sRGB\\...0y\\x02\\x07\\x00\\x00\\x00\\x90\\'p\\x00\\x00\\x00\\x00y\\x02\\x07\\x00\\x00\\x00\\x907P:\\x08\\xf0r-\\xe5R\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\nele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []\n\n    def wrapper(*args, **kwargs):\n        # todo “以后再说”报错，当前提示无法弹出，待再次验证\n        _black_list = [\n            # 同意用户协议\n            (By.ID, \"com.kejian.huahua:id/tv_positive\"),\n            # 跳过启动页\n            (By.ID, \"com.kejian.huahua:id/iv_into\"),\n            # 同意隐私协议\n            (By.ID, \"com.kejian.huahua:id/iv_chose_state\"),\n            # 选择登录方式页面，同意用户协议\n            (By.ID, \"com.kejian.huahua:id/iv_chose_state\"),\n            # 获取位置权限\n           # (By.ID, \"com.android.permissioncontroller:id/permission_allow_always_button\"),\n            #(By.ID, \"com.lbe.security.miui:id/permission_allow_foreground_only_button\"),\n            # 关闭首页弹窗\n           (By.ID, \"com.kejian.huahua:id/iv_del_img\")\n    \n        ]\n        from page.base_page import BasePage\n        instance: BasePage = args[0]  # 接入self\n        try:\n            logging.info(\"run \" + func.__name__ + \"\\n args: \\n\" + repr(args[1:]) + \"\\n\" + repr(kwargs))\n>           element = func(*args, **kwargs)\n\n..\\page\\handle_black.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <page.mine.Mine object at 0x000002B0BA214488>, by = 'id', locator = 'com.kejian.huahua:id/iv_qrcode'\n\n    @handle_black\n    def find(self, by, locator):\n        logging.info(\"find\")\n        logging.info(locator)\n        if locator is None:\n            result = self._driver.find_element(*by)\n        else:\n>           result = self._driver.find_element(by, locator)\n\n..\\page\\base_page.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"f6f6dcab-e8b6-4a65-9bc2-686b23d8f764\")>, by = 'id', value = 'com.kejian.huahua:id/iv_qrcode'\n\n    def find_element(self, by: str = AppiumBy.ID, value: Union[str, Dict, None] = None) -> MobileWebElement:\n        \"\"\"\n        Find an element given a AppiumBy strategy and locator\n    \n        Args:\n            by: The strategy\n            value: The locator\n    \n        Usage:\n            driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='accessibility_id')\n    \n        Returns:\n            `appium.webdriver.webelement.WebElement`: The found element\n    \n        \"\"\"\n        # We prefer to patch locators in the client code\n        # Checking current context every time a locator is accessed could significantly slow down tests\n        # Check https://github.com/appium/python-client/pull/724 before submitting any issue\n        # if by == By.ID:\n        #     by = By.CSS_SELECTOR\n        #     value = '[id=\"%s\"]' % value\n        # elif by == By.TAG_NAME:\n        #     by = By.CSS_SELECTOR\n        # elif by == By.CLASS_NAME:\n        #     by = By.CSS_SELECTOR\n        #     value = \".%s\" % value\n        # elif by == By.NAME:\n        #     by = By.CSS_SELECTOR\n        #     value = '[name=\"%s\"]' % value\n    \n>       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']\n\n..\\venv\\lib\\site-packages\\appium\\webdriver\\webdriver.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"f6f6dcab-e8b6-4a65-9bc2-686b23d8f764\")>, driver_command = 'findElement', params = {'using': 'id', 'value': 'com.kejian.huahua:id/iv_qrcode'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA212D88>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...id-driver\\\\\\\\lib\\\\\\\\commands\\\\\\\\find.js:75:11)\\\\n    at process._tickCallback (internal/process/next_tick.js:68:7)\"}}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n            super().check_response(response)\n        except WebDriverException as wde:\n            if wde.msg == 'No such context found.':\n                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde\n>           raise wde\n\n..\\venv\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA212D88>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...id-driver\\\\\\\\lib\\\\\\\\commands\\\\\\\\find.js:75:11)\\\\n    at process._tickCallback (internal/process/next_tick.js:68:7)\"}}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n>           super().check_response(response)\n\n..\\venv\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002B0BA212D88>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...id-driver\\\\\\\\lib\\\\\\\\commands\\\\\\\\find.js:75:11)\\\\n    at process._tickCallback (internal/process/next_tick.js:68:7)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.\nE       Stacktrace:\nE       NoSuchElementError: An element could not be located on the page using the given search parameters.\nE           at AndroidUiautomator2Driver.helpers.findElOrEls (C:\\Users\\dd-33\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-android-driver\\lib\\commands\\find.js:75:11)\nE           at process._tickCallback (internal/process/next_tick.js:68:7)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_mine.TestMine object at 0x000002B0BA0AE308>\n\n    def test_qrcode_bind_wx(self):\n>       assert self.mine.qrcode_bind_wx() is None\n\ntest_mine.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page\\mine.py:16: in qrcode_bind_wx\n    self.steps(\"../data/mine.yaml\", \"qrcode\")\n..\\page\\base_page.py:90: in steps\n    self.find(step[\"by\"], step[\"locator\"]).click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (<page.mine.Mine object at 0x000002B0BA214488>, 'id', 'com.kejian.huahua:id/iv_qrcode'), kwargs = {}\n_black_list = [('id', 'com.kejian.huahua:id/tv_positive'), ('id', 'com.kejian.huahua:id/iv_into'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_chose_state'), ('id', 'com.kejian.huahua:id/iv_del_img')]\nBasePage = <class 'page.base_page.BasePage'>, instance = <page.mine.Mine object at 0x000002B0BA214488>, f = <_io.BufferedReader name='tmp.png'>\ncontent = b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x048\\x00\\x00\\t$\\x08\\x06\\x00\\x00\\x00\\xf9\\xd3\\xcf\\xaf\\x00\\x00\\x00\\x01sRGB\\...0y\\x02\\x07\\x00\\x00\\x00\\x90\\'p\\x00\\x00\\x00\\x00y\\x02\\x07\\x00\\x00\\x00\\x907P:\\x08\\xf0r-\\xe5R\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\nele = ('id', 'com.kejian.huahua:id/iv_del_img'), eles = []\n\n    def wrapper(*args, **kwargs):\n        # todo “以后再说”报错，当前提示无法弹出，待再次验证\n        _black_list = [\n            # 同意用户协议\n            (By.ID, \"com.kejian.huahua:id/tv_positive\"),\n            # 跳过启动页\n            (By.ID, \"com.kejian.huahua:id/iv_into\"),\n            # 同意隐私协议\n            (By.ID, \"com.kejian.huahua:id/iv_chose_state\"),\n            # 选择登录方式页面，同意用户协议\n            (By.ID, \"com.kejian.huahua:id/iv_chose_state\"),\n            # 获取位置权限\n           # (By.ID, \"com.android.permissioncontroller:id/permission_allow_always_button\"),\n            #(By.ID, \"com.lbe.security.miui:id/permission_allow_foreground_only_button\"),\n            # 关闭首页弹窗\n           (By.ID, \"com.kejian.huahua:id/iv_del_img\")\n    \n        ]\n        from page.base_page import BasePage\n        instance: BasePage = args[0]  # 接入self\n        try:\n            logging.info(\"run \" + func.__name__ + \"\\n args: \\n\" + repr(args[1:]) + \"\\n\" + repr(kwargs))\n            element = func(*args, **kwargs)\n            # 清空错误次数\n            _error_num = 0\n            instance.set_implicitly_wait(20)\n            return element\n        except Exception as e:\n            instance.screenshot(\"tmp.png\")\n            with open(\"tmp.png\", \"rb\") as f:\n                content = f.read()\n            #.attach(content, attachment_type=.attachment_type.PNG)\n            logging.error(\"element not found, handle black list\")\n            instance.set_implicitly_wait(5)\n            # 如果次数太多，就退出异常逻辑，直接报错\n            if instance._error_num > instance._max_err_num:\n                instance._error_num = 0\n                raise e\n            # 记录一直异常的次数\n            instance._error_num += 1\n            # 对黑名单里的弹框进行处理\n            for ele in instance._black_list:\n                logging.info(ele)\n                eles = instance.finds(ele)\n                if len(eles) > 0:\n                    eles[0].click()\n                    # 继续寻找原来的正常控件\n                    return wrapper(*args, **kwargs)\n            # 如果黑名单也没有，就报错\n            logging.warning(\"black list no one foound\")\n>           raise ValueError(\"元素未找到，且不在黑名单中\")\nE           ValueError: 元素未找到，且不在黑名单中\n\n..\\page\\handle_black.py:59: ValueError"}, "attachments": [{"name": "log", "source": "c042754b-6bbc-44c9-9004-0128892da87a-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "f087a6d2-7ed5-4783-b480-e3557de103d7-attachment.txt", "type": "text/plain"}], "start": 1703747124818, "stop": 1703747179461, "uuid": "4183a027-0407-4bd0-b5dc-3c402a072442", "historyId": "255f7ba987d4c2eaf4191a71cc52b2ec", "testCaseId": "255f7ba987d4c2eaf4191a71cc52b2ec", "fullName": "test_mine.TestMine#test_qrcode_bind_wx", "labels": [{"name": "suite", "value": "test_mine"}, {"name": "subSuite", "value": "TestMine"}, {"name": "host", "value": "DESKTOP-292JA13"}, {"name": "thread", "value": "109584-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_mine"}]}